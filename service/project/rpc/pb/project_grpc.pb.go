// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: project.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectClient is the client API for Project service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectClient interface {
	// basic operation
	GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectRsp, error)
	GetProjectAuth(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectAuthRsp, error)
	AddProject(ctx context.Context, in *AddProjectReq, opts ...grpc.CallOption) (*AddProjectRsp, error)
	UpdateProject(ctx context.Context, in *UpdateProjectReq, opts ...grpc.CallOption) (*UpdateProjectRsp, error)
	DeleteProject(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*DeleteProjectRsp, error)
	ListProject(ctx context.Context, in *ListProjectReq, opts ...grpc.CallOption) (*ListProjectRsp, error)
	ListProjectFiles(ctx context.Context, in *ListProjectFilesReq, opts ...grpc.CallOption) (*ListProjectFilesRsp, error)
	ListProjectAllFiles(ctx context.Context, in *ListProjectAllFilesReq, opts ...grpc.CallOption) (*ListProjectFilesRsp, error)
	CreateFile(ctx context.Context, in *CreateFileReq, opts ...grpc.CallOption) (*CreateFileRsp, error)
	ReadFile(ctx context.Context, in *ReadFileReq, opts ...grpc.CallOption) (*ReadFileRsp, error)
	UpdateFile(ctx context.Context, in *UpdateFileReq, opts ...grpc.CallOption) (*UpdateFileRsp, error)
	DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileRsp, error)
	MoveFile(ctx context.Context, in *MoveFileReq, opts ...grpc.CallOption) (*MoveFileRsp, error)
	MkDir(ctx context.Context, in *MkDirReq, opts ...grpc.CallOption) (*MkDirRsp, error)
	WorkStatus(ctx context.Context, in *WorkStatusReq, opts ...grpc.CallOption) (*WorkStatusRsp, error)
	Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitRsp, error)
	// permission manager
	AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserRsp, error)
	RemoveUser(ctx context.Context, in *RemoveUserReq, opts ...grpc.CallOption) (*RemoveUserRsp, error)
	ModifyPermission(ctx context.Context, in *ModifyPermissionReq, opts ...grpc.CallOption) (*ModifyPermissionRsp, error)
}

type projectClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectClient(cc grpc.ClientConnInterface) ProjectClient {
	return &projectClient{cc}
}

func (c *projectClient) GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectRsp, error) {
	out := new(GetProjectRsp)
	err := c.cc.Invoke(ctx, "/project.project/getProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) GetProjectAuth(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectAuthRsp, error) {
	out := new(GetProjectAuthRsp)
	err := c.cc.Invoke(ctx, "/project.project/getProjectAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) AddProject(ctx context.Context, in *AddProjectReq, opts ...grpc.CallOption) (*AddProjectRsp, error) {
	out := new(AddProjectRsp)
	err := c.cc.Invoke(ctx, "/project.project/addProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) UpdateProject(ctx context.Context, in *UpdateProjectReq, opts ...grpc.CallOption) (*UpdateProjectRsp, error) {
	out := new(UpdateProjectRsp)
	err := c.cc.Invoke(ctx, "/project.project/updateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) DeleteProject(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*DeleteProjectRsp, error) {
	out := new(DeleteProjectRsp)
	err := c.cc.Invoke(ctx, "/project.project/deleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) ListProject(ctx context.Context, in *ListProjectReq, opts ...grpc.CallOption) (*ListProjectRsp, error) {
	out := new(ListProjectRsp)
	err := c.cc.Invoke(ctx, "/project.project/listProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) ListProjectFiles(ctx context.Context, in *ListProjectFilesReq, opts ...grpc.CallOption) (*ListProjectFilesRsp, error) {
	out := new(ListProjectFilesRsp)
	err := c.cc.Invoke(ctx, "/project.project/listProjectFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) ListProjectAllFiles(ctx context.Context, in *ListProjectAllFilesReq, opts ...grpc.CallOption) (*ListProjectFilesRsp, error) {
	out := new(ListProjectFilesRsp)
	err := c.cc.Invoke(ctx, "/project.project/listProjectAllFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) CreateFile(ctx context.Context, in *CreateFileReq, opts ...grpc.CallOption) (*CreateFileRsp, error) {
	out := new(CreateFileRsp)
	err := c.cc.Invoke(ctx, "/project.project/createFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) ReadFile(ctx context.Context, in *ReadFileReq, opts ...grpc.CallOption) (*ReadFileRsp, error) {
	out := new(ReadFileRsp)
	err := c.cc.Invoke(ctx, "/project.project/readFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) UpdateFile(ctx context.Context, in *UpdateFileReq, opts ...grpc.CallOption) (*UpdateFileRsp, error) {
	out := new(UpdateFileRsp)
	err := c.cc.Invoke(ctx, "/project.project/updateFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileRsp, error) {
	out := new(DeleteFileRsp)
	err := c.cc.Invoke(ctx, "/project.project/deleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) MoveFile(ctx context.Context, in *MoveFileReq, opts ...grpc.CallOption) (*MoveFileRsp, error) {
	out := new(MoveFileRsp)
	err := c.cc.Invoke(ctx, "/project.project/moveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) MkDir(ctx context.Context, in *MkDirReq, opts ...grpc.CallOption) (*MkDirRsp, error) {
	out := new(MkDirRsp)
	err := c.cc.Invoke(ctx, "/project.project/mkDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) WorkStatus(ctx context.Context, in *WorkStatusReq, opts ...grpc.CallOption) (*WorkStatusRsp, error) {
	out := new(WorkStatusRsp)
	err := c.cc.Invoke(ctx, "/project.project/workStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitRsp, error) {
	out := new(CommitRsp)
	err := c.cc.Invoke(ctx, "/project.project/commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserRsp, error) {
	out := new(AddUserRsp)
	err := c.cc.Invoke(ctx, "/project.project/addUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) RemoveUser(ctx context.Context, in *RemoveUserReq, opts ...grpc.CallOption) (*RemoveUserRsp, error) {
	out := new(RemoveUserRsp)
	err := c.cc.Invoke(ctx, "/project.project/removeUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) ModifyPermission(ctx context.Context, in *ModifyPermissionReq, opts ...grpc.CallOption) (*ModifyPermissionRsp, error) {
	out := new(ModifyPermissionRsp)
	err := c.cc.Invoke(ctx, "/project.project/modifyPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServer is the server API for Project service.
// All implementations must embed UnimplementedProjectServer
// for forward compatibility
type ProjectServer interface {
	// basic operation
	GetProject(context.Context, *GetProjectReq) (*GetProjectRsp, error)
	GetProjectAuth(context.Context, *GetProjectReq) (*GetProjectAuthRsp, error)
	AddProject(context.Context, *AddProjectReq) (*AddProjectRsp, error)
	UpdateProject(context.Context, *UpdateProjectReq) (*UpdateProjectRsp, error)
	DeleteProject(context.Context, *DeleteProjectReq) (*DeleteProjectRsp, error)
	ListProject(context.Context, *ListProjectReq) (*ListProjectRsp, error)
	ListProjectFiles(context.Context, *ListProjectFilesReq) (*ListProjectFilesRsp, error)
	ListProjectAllFiles(context.Context, *ListProjectAllFilesReq) (*ListProjectFilesRsp, error)
	CreateFile(context.Context, *CreateFileReq) (*CreateFileRsp, error)
	ReadFile(context.Context, *ReadFileReq) (*ReadFileRsp, error)
	UpdateFile(context.Context, *UpdateFileReq) (*UpdateFileRsp, error)
	DeleteFile(context.Context, *DeleteFileReq) (*DeleteFileRsp, error)
	MoveFile(context.Context, *MoveFileReq) (*MoveFileRsp, error)
	MkDir(context.Context, *MkDirReq) (*MkDirRsp, error)
	WorkStatus(context.Context, *WorkStatusReq) (*WorkStatusRsp, error)
	Commit(context.Context, *CommitReq) (*CommitRsp, error)
	// permission manager
	AddUser(context.Context, *AddUserReq) (*AddUserRsp, error)
	RemoveUser(context.Context, *RemoveUserReq) (*RemoveUserRsp, error)
	ModifyPermission(context.Context, *ModifyPermissionReq) (*ModifyPermissionRsp, error)
	mustEmbedUnimplementedProjectServer()
}

// UnimplementedProjectServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServer struct {
}

func (UnimplementedProjectServer) GetProject(context.Context, *GetProjectReq) (*GetProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectServer) GetProjectAuth(context.Context, *GetProjectReq) (*GetProjectAuthRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectAuth not implemented")
}
func (UnimplementedProjectServer) AddProject(context.Context, *AddProjectReq) (*AddProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProject not implemented")
}
func (UnimplementedProjectServer) UpdateProject(context.Context, *UpdateProjectReq) (*UpdateProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectServer) DeleteProject(context.Context, *DeleteProjectReq) (*DeleteProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectServer) ListProject(context.Context, *ListProjectReq) (*ListProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProject not implemented")
}
func (UnimplementedProjectServer) ListProjectFiles(context.Context, *ListProjectFilesReq) (*ListProjectFilesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectFiles not implemented")
}
func (UnimplementedProjectServer) ListProjectAllFiles(context.Context, *ListProjectAllFilesReq) (*ListProjectFilesRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectAllFiles not implemented")
}
func (UnimplementedProjectServer) CreateFile(context.Context, *CreateFileReq) (*CreateFileRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFile not implemented")
}
func (UnimplementedProjectServer) ReadFile(context.Context, *ReadFileReq) (*ReadFileRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadFile not implemented")
}
func (UnimplementedProjectServer) UpdateFile(context.Context, *UpdateFileReq) (*UpdateFileRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFile not implemented")
}
func (UnimplementedProjectServer) DeleteFile(context.Context, *DeleteFileReq) (*DeleteFileRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedProjectServer) MoveFile(context.Context, *MoveFileReq) (*MoveFileRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveFile not implemented")
}
func (UnimplementedProjectServer) MkDir(context.Context, *MkDirReq) (*MkDirRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MkDir not implemented")
}
func (UnimplementedProjectServer) WorkStatus(context.Context, *WorkStatusReq) (*WorkStatusRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WorkStatus not implemented")
}
func (UnimplementedProjectServer) Commit(context.Context, *CommitReq) (*CommitRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Commit not implemented")
}
func (UnimplementedProjectServer) AddUser(context.Context, *AddUserReq) (*AddUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedProjectServer) RemoveUser(context.Context, *RemoveUserReq) (*RemoveUserRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveUser not implemented")
}
func (UnimplementedProjectServer) ModifyPermission(context.Context, *ModifyPermissionReq) (*ModifyPermissionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyPermission not implemented")
}
func (UnimplementedProjectServer) mustEmbedUnimplementedProjectServer() {}

// UnsafeProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServer will
// result in compilation errors.
type UnsafeProjectServer interface {
	mustEmbedUnimplementedProjectServer()
}

func RegisterProjectServer(s grpc.ServiceRegistrar, srv ProjectServer) {
	s.RegisterService(&Project_ServiceDesc, srv)
}

func _Project_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/getProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).GetProject(ctx, req.(*GetProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_GetProjectAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).GetProjectAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/getProjectAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).GetProjectAuth(ctx, req.(*GetProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_AddProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).AddProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/addProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).AddProject(ctx, req.(*AddProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/updateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).UpdateProject(ctx, req.(*UpdateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/deleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).DeleteProject(ctx, req.(*DeleteProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_ListProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).ListProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/listProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).ListProject(ctx, req.(*ListProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_ListProjectFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).ListProjectFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/listProjectFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).ListProjectFiles(ctx, req.(*ListProjectFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_ListProjectAllFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectAllFilesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).ListProjectAllFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/listProjectAllFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).ListProjectAllFiles(ctx, req.(*ListProjectAllFilesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_CreateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).CreateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/createFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).CreateFile(ctx, req.(*CreateFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_ReadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).ReadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/readFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).ReadFile(ctx, req.(*ReadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_UpdateFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).UpdateFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/updateFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).UpdateFile(ctx, req.(*UpdateFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/deleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).DeleteFile(ctx, req.(*DeleteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_MoveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).MoveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/moveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).MoveFile(ctx, req.(*MoveFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_MkDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MkDirReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).MkDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/mkDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).MkDir(ctx, req.(*MkDirReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_WorkStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).WorkStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/workStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).WorkStatus(ctx, req.(*WorkStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Commit(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/addUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).AddUser(ctx, req.(*AddUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_RemoveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).RemoveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/removeUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).RemoveUser(ctx, req.(*RemoveUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_ModifyPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyPermissionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).ModifyPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/project.project/modifyPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).ModifyPermission(ctx, req.(*ModifyPermissionReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Project_ServiceDesc is the grpc.ServiceDesc for Project service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Project_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.project",
	HandlerType: (*ProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getProject",
			Handler:    _Project_GetProject_Handler,
		},
		{
			MethodName: "getProjectAuth",
			Handler:    _Project_GetProjectAuth_Handler,
		},
		{
			MethodName: "addProject",
			Handler:    _Project_AddProject_Handler,
		},
		{
			MethodName: "updateProject",
			Handler:    _Project_UpdateProject_Handler,
		},
		{
			MethodName: "deleteProject",
			Handler:    _Project_DeleteProject_Handler,
		},
		{
			MethodName: "listProject",
			Handler:    _Project_ListProject_Handler,
		},
		{
			MethodName: "listProjectFiles",
			Handler:    _Project_ListProjectFiles_Handler,
		},
		{
			MethodName: "listProjectAllFiles",
			Handler:    _Project_ListProjectAllFiles_Handler,
		},
		{
			MethodName: "createFile",
			Handler:    _Project_CreateFile_Handler,
		},
		{
			MethodName: "readFile",
			Handler:    _Project_ReadFile_Handler,
		},
		{
			MethodName: "updateFile",
			Handler:    _Project_UpdateFile_Handler,
		},
		{
			MethodName: "deleteFile",
			Handler:    _Project_DeleteFile_Handler,
		},
		{
			MethodName: "moveFile",
			Handler:    _Project_MoveFile_Handler,
		},
		{
			MethodName: "mkDir",
			Handler:    _Project_MkDir_Handler,
		},
		{
			MethodName: "workStatus",
			Handler:    _Project_WorkStatus_Handler,
		},
		{
			MethodName: "commit",
			Handler:    _Project_Commit_Handler,
		},
		{
			MethodName: "addUser",
			Handler:    _Project_AddUser_Handler,
		},
		{
			MethodName: "removeUser",
			Handler:    _Project_RemoveUser_Handler,
		},
		{
			MethodName: "modifyPermission",
			Handler:    _Project_ModifyPermission_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "project.proto",
}
