// Code generated by goctl. DO NOT EDIT!
// Source: project.proto

package project

import (
	"context"

	"e5Code-Service/service/project/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddProjectReq       = pb.AddProjectReq
	AddProjectRsp       = pb.AddProjectRsp
	AddUserReq          = pb.AddUserReq
	AddUserRsp          = pb.AddUserRsp
	DeleteProjectReq    = pb.DeleteProjectReq
	DeleteProjectRsp    = pb.DeleteProjectRsp
	GetProjectReq       = pb.GetProjectReq
	GetProjectRsp       = pb.GetProjectRsp
	ListProjectFilesReq = pb.ListProjectFilesReq
	ListProjectFilesRsp = pb.ListProjectFilesRsp
	ListProjectReq      = pb.ListProjectReq
	ListProjectRsp      = pb.ListProjectRsp
	ModifyPermissionReq = pb.ModifyPermissionReq
	ModifyPermissionRsp = pb.ModifyPermissionRsp
	ProjectModel        = pb.ProjectModel
	RemoveUserReq       = pb.RemoveUserReq
	RemoveUserRsp       = pb.RemoveUserRsp
	UpdateProjectReq    = pb.UpdateProjectReq
	UpdateProjectRsp    = pb.UpdateProjectRsp
	UserModel           = pb.UserModel

	Project interface {
		//  basic operation
		GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectRsp, error)
		AddProject(ctx context.Context, in *AddProjectReq, opts ...grpc.CallOption) (*AddProjectRsp, error)
		UpdateProject(ctx context.Context, in *UpdateProjectReq, opts ...grpc.CallOption) (*UpdateProjectRsp, error)
		DeleteProject(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*DeleteProjectRsp, error)
		ListProject(ctx context.Context, in *ListProjectReq, opts ...grpc.CallOption) (*ListProjectRsp, error)
		ListProjectFiles(ctx context.Context, in *ListProjectFilesReq, opts ...grpc.CallOption) (*ListProjectFilesRsp, error)
		//  permission manager
		AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserRsp, error)
		RemoveUser(ctx context.Context, in *RemoveUserReq, opts ...grpc.CallOption) (*RemoveUserRsp, error)
		ModifyPermission(ctx context.Context, in *ModifyPermissionReq, opts ...grpc.CallOption) (*ModifyPermissionRsp, error)
	}

	defaultProject struct {
		cli zrpc.Client
	}
)

func NewProject(cli zrpc.Client) Project {
	return &defaultProject{
		cli: cli,
	}
}

//  basic operation
func (m *defaultProject) GetProject(ctx context.Context, in *GetProjectReq, opts ...grpc.CallOption) (*GetProjectRsp, error) {
	client := pb.NewProjectClient(m.cli.Conn())
	return client.GetProject(ctx, in, opts...)
}

func (m *defaultProject) AddProject(ctx context.Context, in *AddProjectReq, opts ...grpc.CallOption) (*AddProjectRsp, error) {
	client := pb.NewProjectClient(m.cli.Conn())
	return client.AddProject(ctx, in, opts...)
}

func (m *defaultProject) UpdateProject(ctx context.Context, in *UpdateProjectReq, opts ...grpc.CallOption) (*UpdateProjectRsp, error) {
	client := pb.NewProjectClient(m.cli.Conn())
	return client.UpdateProject(ctx, in, opts...)
}

func (m *defaultProject) DeleteProject(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*DeleteProjectRsp, error) {
	client := pb.NewProjectClient(m.cli.Conn())
	return client.DeleteProject(ctx, in, opts...)
}

func (m *defaultProject) ListProject(ctx context.Context, in *ListProjectReq, opts ...grpc.CallOption) (*ListProjectRsp, error) {
	client := pb.NewProjectClient(m.cli.Conn())
	return client.ListProject(ctx, in, opts...)
}

func (m *defaultProject) ListProjectFiles(ctx context.Context, in *ListProjectFilesReq, opts ...grpc.CallOption) (*ListProjectFilesRsp, error) {
	client := pb.NewProjectClient(m.cli.Conn())
	return client.ListProjectFiles(ctx, in, opts...)
}

//  permission manager
func (m *defaultProject) AddUser(ctx context.Context, in *AddUserReq, opts ...grpc.CallOption) (*AddUserRsp, error) {
	client := pb.NewProjectClient(m.cli.Conn())
	return client.AddUser(ctx, in, opts...)
}

func (m *defaultProject) RemoveUser(ctx context.Context, in *RemoveUserReq, opts ...grpc.CallOption) (*RemoveUserRsp, error) {
	client := pb.NewProjectClient(m.cli.Conn())
	return client.RemoveUser(ctx, in, opts...)
}

func (m *defaultProject) ModifyPermission(ctx context.Context, in *ModifyPermissionReq, opts ...grpc.CallOption) (*ModifyPermissionRsp, error) {
	client := pb.NewProjectClient(m.cli.Conn())
	return client.ModifyPermission(ctx, in, opts...)
}
