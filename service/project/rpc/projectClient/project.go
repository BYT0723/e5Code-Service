// Code generated by goctl. DO NOT EDIT!
// Source: project.proto

package projectClient

import (
	"context"

	"e5Code-Service/service/project/rpc/project"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	AddProjectReq    = project.AddProjectReq
	AddProjectRsp    = project.AddProjectRsp
	UpdateProjectReq = project.UpdateProjectReq
	Project          = project.Project
	GetProjectReq    = project.GetProjectReq
	GetProjectRsp    = project.GetProjectRsp
	UpdateProjectRsp = project.UpdateProjectRsp
	DeleteProjectReq = project.DeleteProjectReq
	DeleteProjectRsp = project.DeleteProjectRsp

	ProjectServer interface {
		GetProject(ctx context.Context, in *GetProjectReq) (*GetProjectRsp, error)
		AddProject(ctx context.Context, in *AddProjectReq) (*AddProjectRsp, error)
		UpdateProject(ctx context.Context, in *UpdateProjectReq) (*UpdateProjectRsp, error)
		DeleteProject(ctx context.Context, in *DeleteProjectReq) (*DeleteProjectRsp, error)
	}

	defaultProject struct {
		cli zrpc.Client
	}
)

func NewProject(cli zrpc.Client) ProjectServer {
	return &defaultProject{
		cli: cli,
	}
}

func (m *defaultProject) GetProject(ctx context.Context, in *GetProjectReq) (*GetProjectRsp, error) {
	client := project.NewProjectClient(m.cli.Conn())
	return client.GetProject(ctx, in)
}

func (m *defaultProject) AddProject(ctx context.Context, in *AddProjectReq) (*AddProjectRsp, error) {
	client := project.NewProjectClient(m.cli.Conn())
	return client.AddProject(ctx, in)
}

func (m *defaultProject) UpdateProject(ctx context.Context, in *UpdateProjectReq) (*UpdateProjectRsp, error) {
	client := project.NewProjectClient(m.cli.Conn())
	return client.UpdateProject(ctx, in)
}

func (m *defaultProject) DeleteProject(ctx context.Context, in *DeleteProjectReq) (*DeleteProjectRsp, error) {
	client := project.NewProjectClient(m.cli.Conn())
	return client.DeleteProject(ctx, in)
}
