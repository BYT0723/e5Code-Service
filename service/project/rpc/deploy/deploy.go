// Code generated by goctl. DO NOT EDIT!
// Source: deploy.proto

package deploy

import (
	"context"

	"e5Code-Service/service/project/rpc/project"

	"github.com/tal-tech/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddDeployReq    = project.AddDeployReq
	AddDeployRsp    = project.AddDeployRsp
	ContainerConfig = project.ContainerConfig
	DeleteDeployReq = project.DeleteDeployReq
	DeleteDeployRsp = project.DeleteDeployRsp
	Deploy          = project.Deploy
	DeployReq       = project.DeployReq
	DeployRsp       = project.DeployRsp
	GetDeployReq    = project.GetDeployReq
	GetDeployRsp    = project.GetDeployRsp
	SSHConfig       = project.SSHConfig
	UpdateDeployReq = project.UpdateDeployReq
	UpdateDeployRsp = project.UpdateDeployRsp

	DeployServer interface {
		GetDepoly(ctx context.Context, in *GetDeployReq, opts ...grpc.CallOption) (*GetDeployRsp, error)
		AddDeploy(ctx context.Context, in *AddDeployReq, opts ...grpc.CallOption) (*AddDeployRsp, error)
		UpdateDeploy(ctx context.Context, in *UpdateDeployReq, opts ...grpc.CallOption) (*UpdateDeployRsp, error)
		DeleteDeploy(ctx context.Context, in *DeleteDeployReq, opts ...grpc.CallOption) (*DeleteDeployRsp, error)
		Deploy(ctx context.Context, in *DeployReq, opts ...grpc.CallOption) (*DeployRsp, error)
	}

	defaultDeploy struct {
		cli zrpc.Client
	}
)

func NewDeploy(cli zrpc.Client) DeployServer {
	return &defaultDeploy{
		cli: cli,
	}
}

func (m *defaultDeploy) GetDepoly(ctx context.Context, in *GetDeployReq, opts ...grpc.CallOption) (*GetDeployRsp, error) {
	client := project.NewDeployClient(m.cli.Conn())
	return client.GetDepoly(ctx, in, opts...)
}

func (m *defaultDeploy) AddDeploy(ctx context.Context, in *AddDeployReq, opts ...grpc.CallOption) (*AddDeployRsp, error) {
	client := project.NewDeployClient(m.cli.Conn())
	return client.AddDeploy(ctx, in, opts...)
}

func (m *defaultDeploy) UpdateDeploy(ctx context.Context, in *UpdateDeployReq, opts ...grpc.CallOption) (*UpdateDeployRsp, error) {
	client := project.NewDeployClient(m.cli.Conn())
	return client.UpdateDeploy(ctx, in, opts...)
}

func (m *defaultDeploy) DeleteDeploy(ctx context.Context, in *DeleteDeployReq, opts ...grpc.CallOption) (*DeleteDeployRsp, error) {
	client := project.NewDeployClient(m.cli.Conn())
	return client.DeleteDeploy(ctx, in, opts...)
}

func (m *defaultDeploy) Deploy(ctx context.Context, in *DeployReq, opts ...grpc.CallOption) (*DeployRsp, error) {
	client := project.NewDeployClient(m.cli.Conn())
	return client.Deploy(ctx, in, opts...)
}
