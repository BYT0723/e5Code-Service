// Code generated by goctl. DO NOT EDIT!
// Source: user.proto

package userClient

import (
	"context"

	"e5Code-Service/service/user/rpc/user"

	"github.com/tal-tech/go-zero/zrpc"
)

type (
	User              = user.User
	GetUserRsp        = user.GetUserRsp
	AddUserReq        = user.AddUserReq
	AddUserRsp        = user.AddUserRsp
	UpdateUserReq     = user.UpdateUserReq
	DeleteUserReq     = user.DeleteUserReq
	LoginRsp          = user.LoginRsp
	GetUserReq        = user.GetUserReq
	GetUserByEmailReq = user.GetUserByEmailReq
	UpdateUserRsp     = user.UpdateUserRsp
	DeleteUserRsp     = user.DeleteUserRsp
	LoginReq          = user.LoginReq

	UserServer interface {
		GetUser(ctx context.Context, in *GetUserReq) (*GetUserRsp, error)
		GetUserByEmail(ctx context.Context, in *GetUserByEmailReq) (*GetUserRsp, error)
		AddUser(ctx context.Context, in *AddUserReq) (*AddUserRsp, error)
		UpdateUser(ctx context.Context, in *UpdateUserReq) (*UpdateUserRsp, error)
		DeleteUser(ctx context.Context, in *DeleteUserReq) (*DeleteUserRsp, error)
		Login(ctx context.Context, in *LoginReq) (*LoginRsp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) UserServer {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) GetUser(ctx context.Context, in *GetUserReq) (*GetUserRsp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUser(ctx, in)
}

func (m *defaultUser) GetUserByEmail(ctx context.Context, in *GetUserByEmailReq) (*GetUserRsp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.GetUserByEmail(ctx, in)
}

func (m *defaultUser) AddUser(ctx context.Context, in *AddUserReq) (*AddUserRsp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.AddUser(ctx, in)
}

func (m *defaultUser) UpdateUser(ctx context.Context, in *UpdateUserReq) (*UpdateUserRsp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UpdateUser(ctx, in)
}

func (m *defaultUser) DeleteUser(ctx context.Context, in *DeleteUserReq) (*DeleteUserRsp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.DeleteUser(ctx, in)
}

func (m *defaultUser) Login(ctx context.Context, in *LoginReq) (*LoginRsp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.Login(ctx, in)
}
